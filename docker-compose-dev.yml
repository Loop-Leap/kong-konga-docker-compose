version: '3.8'

services:
  # PostgreSQL database for Kong storage
  kong-database:
    image: arm64v8/postgres:11   # Use arm64 Postgres 11 image
    container_name: kong-database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}       # DB user from env variable
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # DB password from env variable
      - POSTGRES_DB=${POSTGRES_DB}           # Database name from env variable
    volumes:
      - db-data-kong-postgres:/var/lib/postgresql/data  # Persist DB data on volume
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]  # Check DB readiness
      interval: 10s        # Run health check every 10 seconds
      timeout: 5s          # Timeout after 5 seconds
      retries: 5           # Retry 5 times before marking unhealthy
      start_period: 30s    # Initial delay before health checks start
    networks:
      - kong-net           # Connect to custom network 'kong-net'

  # Helper service to create Konga's database if it doesn't exist
  konga-db-creator:
    image: arm64v8/postgres:11   # Same Postgres image for running DB commands
    depends_on:
      kong-database:
        condition: service_healthy   # Wait until kong-database is healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    entrypoint: >
      bash -c "
        # Wait until the DB is ready
        until pg_isready -h kong-database -U ${POSTGRES_USER}; do
          sleep 2;
        done;
        # Check if the Konga DB exists, create it if not
        psql -h kong-database -U ${POSTGRES_USER} -tc \"SELECT 1 FROM pg_database WHERE datname = '${KONGA_DB}'\" | grep -q 1 ||
        psql -h kong-database -U ${POSTGRES_USER} -c \"CREATE DATABASE \\\"${KONGA_DB}\\\"\";
      "
    networks:
      - kong-net
    restart: "no"  # Run once, do not restart

  # Run Kong database migrations before starting Kong service
  kong-migrations:
    image: kong:3.6.1          # Kong official image version 3.6.1
    depends_on:
      kong-database:
        condition: service_healthy   # Wait for DB to be healthy
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=${POSTGRES_USER}
      - KONG_PG_PASSWORD=${POSTGRES_PASSWORD}
      - KONG_PG_DATABASE=${POSTGRES_DB}
    command: kong migrations bootstrap   # Run bootstrap migrations (initialize schema)
    networks:
      - kong-net
    restart: "no"  # Run once and exit

  # Main Kong API Gateway service
  kong:
    image: kong:3.6.1
    container_name: kong
    depends_on:
      - kong-migrations  # Start after migrations are done
    environment:
      - KONG_DATABASE=postgres             # Use Postgres DB for Kong config storage
      - KONG_PG_HOST=kong-database        # Hostname of the Postgres DB
      - KONG_PG_USER=${POSTGRES_USER}
      - KONG_PG_PASSWORD=${POSTGRES_PASSWORD}
      - KONG_PG_DATABASE=${POSTGRES_DB}
      - KONG_ADMIN_LISTEN=0.0.0.0:8001    # Expose Kong Admin API on port 8001
      - KONG_ADMIN_GUI_URL=https://displate-gateway-admin.dev.displate.top  # Admin GUI URL
      - KONG_PROXY_ACCESS_LOG=/dev/stdout # Proxy access logs to container stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout # Admin API access logs
      - KONG_PROXY_ERROR_LOG=/dev/stderr  # Proxy error logs to stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr  # Admin error logs
    networks:
      - kong-net
    labels:
      - "traefik.enable=true"   # Enable Traefik proxy integration
      # Traefik routing for Kong proxy (port 8000)
      - "traefik.http.routers.kong-proxy.rule=Host(`dev.displate.top`)"
      - "traefik.http.routers.kong-proxy.entrypoints=https"
      - "traefik.http.routers.kong-proxy.service=kong-proxy"
      - "traefik.http.routers.kong-proxy.tls.certresolver=letsencrypt"
      - "traefik.http.routers.kong-proxy.tls=true"
      - "traefik.http.services.kong-proxy.loadbalancer.server.port=8000"
      # Traefik routing for Kong Admin API (port 8001)
      - "traefik.http.routers.kong-admin.rule=Host(`displate-gateway-admin.dev.displate.top`)"
      - "traefik.http.routers.kong-admin.entrypoints=https"
      - "traefik.http.routers.kong-admin.service=kong-admin"
      - "traefik.http.routers.kong-admin.tls.certresolver=letsencrypt"
      - "traefik.http.routers.kong-admin.tls=true"
      - "traefik.http.services.kong-admin.loadbalancer.server.port=8001"
    restart: on-failure  # Restart Kong on failure

  # Konga - Kong dashboard GUI for managing Kong via UI
  konga:
    image: packyzbq/konga:0.14.9-arm64   # Konga image for arm64 architecture
    container_name: konga
    depends_on:
      - konga-db-creator   # Wait until Konga DB is created
    environment:
      - NODE_ENV=production
      - DB_ADAPTER=postgres           # Use Postgres DB for Konga config storage
      - DB_HOST=kong-database         # Point to the same Postgres DB as Kong
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_DATABASE=${KONGA_DB}
      - KONGA_HOOK_TIMEOUT=120000     # Timeout for hooks (ms)
      - KONGA_KONG_URL=http://kong:8001   # URL to Kong Admin API (inside docker network)
    networks:
      - kong-net
    labels:
      - "traefik.enable=true"
      # HTTPS routing for Konga dashboard
      - "traefik.http.routers.konga.rule=Host(`konga.dev.displate.top`)"
      - "traefik.http.routers.konga.entrypoints=https"
      - "traefik.http.routers.konga.service=konga"
      - "traefik.http.routers.konga.tls.certresolver=letsencrypt"
      - "traefik.http.routers.konga.tls=true"
      - "traefik.http.services.konga.loadbalancer.server.port=1337"
      # Redirect HTTP traffic to HTTPS
      - "traefik.http.routers.konga-http.rule=Host(`konga.dev.displate.top`)"
      - "traefik.http.routers.konga-http.entrypoints=http"
      - "traefik.http.routers.konga-http.middlewares=redirect-to-https"
      - "traefik.http.routers.konga-http.service=konga"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

# Volume to persist PostgreSQL data across container restarts
volumes:
  db-data-kong-postgres:

# Custom Docker network so containers can communicate internally
networks:
  kong-net:
    driver: bridge
