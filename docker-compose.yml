version: '3.8'

services:
  kong-database:
    image: arm64v8/postgres:11
    container_name: kong-database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db-data-kong-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - kong-net

  konga-db-creator:
    image: arm64v8/postgres:11
    depends_on:
      kong-database:
        condition: service_healthy
    entrypoint: >
      bash -c "
        until pg_isready -h kong-database -U ${POSTGRES_USER}; do
          sleep 2;
        done;
        psql -h kong-database -U ${POSTGRES_USER} -tc \"SELECT 1 FROM pg_database WHERE datname = '${KONGA_DB}'\" | grep -q 1 ||
        psql -h kong-database -U ${POSTGRES_USER} -c \"CREATE DATABASE \\\"${KONGA_DB}\\\"\";
      "
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - kong-net
    restart: "no"

  kong-migrations:
    image: kong/kong-gateway:3.6.1.0-alpine-arm64
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=${POSTGRES_USER}
      - KONG_PG_PASSWORD=${POSTGRES_PASSWORD}
      - KONG_PG_DATABASE=${POSTGRES_DB}
    command: kong migrations bootstrap
    networks:
      - kong-net
    restart: "no"

  kong:
    image: kong:3.6.1
    container_name: kong
    depends_on:
      - kong-migrations
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=${POSTGRES_USER}
      - KONG_PG_PASSWORD=${POSTGRES_PASSWORD}
      - KONG_PG_DATABASE=${POSTGRES_DB}
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=https://${KONG_ADMIN_DOMAIN}
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
    networks:
      - kong-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kong-proxy.rule=Host(`${KONG_DOMAIN}`)"
      - "traefik.http.routers.kong-proxy.entrypoints=websecure"
      - "traefik.http.routers.kong-proxy.service=kong-proxy"
      - "traefik.http.routers.kong-proxy.tls.certresolver=letsencrypt"
      - "traefik.http.services.kong-proxy.loadbalancer.server.port=8000"
      - "traefik.http.routers.kong-admin.rule=Host(`${KONG_ADMIN_DOMAIN}`)"
      - "traefik.http.routers.kong-admin.entrypoints=websecure"
      - "traefik.http.routers.kong-admin.service=kong-admin"
      - "traefik.http.routers.kong-admin.tls.certresolver=letsencrypt"
      - "traefik.http.services.kong-admin.loadbalancer.server.port=8001"
    restart: on-failure

  konga:
    image: packyzbq/konga:0.14.9-arm64
    container_name: konga
    depends_on:
      - konga-db-creator
    environment:
      - NODE_ENV=production
      - DB_ADAPTER=postgres
      - DB_HOST=kong-database
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_DATABASE=${KONGA_DB}
      - KONGA_HOOK_TIMEOUT=120000
    networks:
      - kong-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.konga.rule=Host(`${KONGA_DOMAIN}`)"
      - "traefik.http.routers.konga.entrypoints=websecure"
      - "traefik.http.routers.konga.service=konga"
      - "traefik.http.routers.konga.tls.certresolver=letsencrypt"
      - "traefik.http.services.konga.loadbalancer.server.port=1337"

volumes:
  db-data-kong-postgres:

networks:
  kong-net:
    driver: bridge
