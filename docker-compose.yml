version: '3.8'
services:
  kong-database:
    image: postgres:13
    container_name: kong-database
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - "db-data-kong-postgres:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - kong-net

  kong-migrations:
    image: kong:latest
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=${POSTGRES_USER}
      - KONG_PG_PASSWORD=${POSTGRES_PASSWORD}
      - KONG_PG_DATABASE=${POSTGRES_DB}
    command: kong migrations bootstrap
    restart: "no"
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net

  kong:
    image: kong:latest
    container_name: kong
    environment:
      - LC_CTYPE=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=${POSTGRES_USER}
      - KONG_PG_PASSWORD=${POSTGRES_PASSWORD}
      - KONG_PG_DATABASE=${POSTGRES_DB}
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=${KONG_ADMIN_GUI_URL}
    restart: on-failure
    ports:
      - "8000:8000"  # Kong proxy HTTP
      - "8443:8443"  # Kong proxy HTTPS
      - "8001:8001"  # Kong Admin API HTTP
      - "8444:8444"  # Kong Admin API HTTPS
    depends_on:
      - kong-migrations
    networks:
      - kong-net
    labels:
      # Enable Traefik for the Kong service
      - "traefik.enable=true"
      # Define the router for Kong's proxy (public API gateway)
      - "traefik.http.routers.kong-proxy.rule=Host(`${KONG_DOMAIN}`)"
      - "traefik.http.routers.kong-proxy.entrypoints=websecure"
      - "traefik.http.routers.kong-proxy.service=kong-proxy"
      - "traefik.http.routers.kong-proxy.tls.certresolver=letsencrypt"
      # Specify the service name and the internal port Kong's proxy listens on (8000)
      - "traefik.http.services.kong-proxy.loadbalancer.server.port=8000"
      # Define a separate router for Kong's Admin API (for internal use, or if you expose it)
      - "traefik.http.routers.kong-admin.rule=Host(`${KONG_ADMIN_DOMAIN}`)"
      - "traefik.http.routers.kong-admin.entrypoints=websecure"
      - "traefik.http.routers.kong-admin.service=kong-admin"
      - "traefik.http.routers.kong-admin.tls.certresolver=letsencrypt"
      # Specify the service name and the internal port Kong's Admin API listens on (8001)
      - "traefik.http.services.kong-admin.loadbalancer.server.port=8001"

  konga:
    image: pantsel/konga:latest
    ports:
      - "1337:1337"
    container_name: konga
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_ADAPTER=postgres
      - DB_HOST=kong-database
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_DATABASE=${KONGA_DB}
    depends_on:
      - kong-database
    networks:
      - kong-net
    labels:
      # Enable Traefik for the Konga service
      - "traefik.enable=true"
      # Define the router for Konga
      - "traefik.http.routers.konga.rule=Host(`${KONGA_DOMAIN}`)"
      - "traefik.http.routers.konga.entrypoints=websecure"
      - "traefik.http.routers.konga.service=konga"
      - "traefik.http.routers.konga.tls.certresolver=letsencrypt"
      # Specify the service name and the internal port Konga listens on (1337)
      - "traefik.http.services.konga.loadbalancer.server.port=1337"

volumes:
  db-data-kong-postgres:

networks:
  kong-net:
    driver: bridge
